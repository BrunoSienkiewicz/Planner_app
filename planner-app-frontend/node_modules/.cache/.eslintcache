[{"/mnt/e/Planner_App/planner-app-frontend/src/index.tsx":"1","/mnt/e/Planner_App/planner-app-frontend/src/reportWebVitals.ts":"2","/mnt/e/Planner_App/planner-app-frontend/src/App.tsx":"3","/mnt/e/Planner_App/planner-app-frontend/src/pages/CalendarPage.tsx":"4","/mnt/e/Planner_App/planner-app-frontend/src/pages/ToDo.tsx":"5","/mnt/e/Planner_App/planner-app-frontend/src/navbar/defaultNavbar.tsx":"6","/mnt/e/Planner_App/planner-app-frontend/src/pages/HomePage.tsx":"7"},{"size":554,"mtime":1682190089142,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1682190089168,"results":"10","hashOfConfig":"9"},{"size":633,"mtime":1682953301351,"results":"11","hashOfConfig":"9"},{"size":2055,"mtime":1682951233367,"results":"12","hashOfConfig":"9"},{"size":2604,"mtime":1682951740929,"results":"13","hashOfConfig":"9"},{"size":486,"mtime":1682952726820,"results":"14","hashOfConfig":"9"},{"size":292,"mtime":1682953265389,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3ts3wl",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/e/Planner_App/planner-app-frontend/src/index.tsx",[],[],"/mnt/e/Planner_App/planner-app-frontend/src/reportWebVitals.ts",[],[],"/mnt/e/Planner_App/planner-app-frontend/src/App.tsx",[],[],"/mnt/e/Planner_App/planner-app-frontend/src/pages/CalendarPage.tsx",[],[],"/mnt/e/Planner_App/planner-app-frontend/src/pages/ToDo.tsx",["38","39"],[],"import React, { useState } from 'react';\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  date: string;\n}\n\nconst ToDo: React.FC = () => {\n  const [toDoList, setToDoList] = useState<Task[]>([]);\n  const [doingList, setDoingList] = useState<Task[]>([]);\n  const [doneList, setDoneList] = useState<Task[]>([]);\n  const [idCounter, setIdCounter] = useState<number>(0);\n\n  const handleAddToDoItem = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // const itemText = event.currentTarget.elements.newToDoItem.value;\n    // if (itemText) {\n    //   const newTask: Task = {\n    //     id: idCounter,\n    //     title: itemText,\n    //     description: '',\n    //     date: '',\n    //   };\n    //   setToDoList([...toDoList, newTask]);\n    //   setIdCounter(idCounter + 1);\n    //   event.currentTarget.reset();\n    // }\n  };\n\n  const handleMoveToDoing = (itemIndex: number) => {\n    const item = toDoList[itemIndex];\n    setToDoList(toDoList.filter((_, index) => index !== itemIndex));\n    setDoingList([...doingList, item]);\n  };\n\n  const handleMoveToDone = (itemIndex: number) => {\n    const item = doingList[itemIndex];\n    setDoingList(doingList.filter((_, index) => index !== itemIndex));\n    setDoneList([...doneList, item]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Trello-like To-Do List</h1>\n      <div className=\"lists-container\">\n        <div className=\"list\">\n          <h2>To Do</h2>\n          <form onSubmit={handleAddToDoItem}>\n            <input type=\"text\" name=\"newToDoItem\" placeholder=\"Add a new item\" />\n            <button type=\"submit\">Add</button>\n          </form>\n          <ul>\n            {toDoList.map((item) => (\n              <li key={item.id}>\n                <div>{item.title}</div>\n                <button onClick={() => handleMoveToDoing(toDoList.indexOf(item))}>Move to Doing</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"list\">\n          <h2>Doing</h2>\n          <ul>\n            {doingList.map((item) => (\n              <li key={item.id}>\n                <div>{item.title}</div>\n                <button onClick={() => handleMoveToDone(doingList.indexOf(item))}>Move to Done</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"list\">\n          <h2>Done</h2>\n          <ul>\n            {doneList.map((item) => (\n              <li key={item.id}>\n                <div>{item.title}</div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToDo;\n","/mnt/e/Planner_App/planner-app-frontend/src/navbar/defaultNavbar.tsx",[],[],"/mnt/e/Planner_App/planner-app-frontend/src/pages/HomePage.tsx",[],[],{"ruleId":"40","severity":1,"message":"41","line":14,"column":10,"nodeType":"42","messageId":"43","endLine":14,"endColumn":19},{"ruleId":"40","severity":1,"message":"44","line":14,"column":21,"nodeType":"42","messageId":"43","endLine":14,"endColumn":33},"@typescript-eslint/no-unused-vars","'idCounter' is assigned a value but never used.","Identifier","unusedVar","'setIdCounter' is assigned a value but never used."]